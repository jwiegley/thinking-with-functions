#+TITLE:     Denotational Design \\ (or: \emph{Thinking with functions})
#+AUTHOR:    John Wiegley and Conal Elliott
#+EMAIL:     john@dfinity.org
#+DATE:      2018-09-10

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en

\setbeamertemplate{footline}{}
\setbeamerfont{block body}{size=\small}
\definecolor{orchid}{RGB}{134, 134, 220}
\definecolor{lightorchid}{RGB}{243, 243, 251}
\setbeamercolor{block title}{fg=white,bg=orchid}
\setbeamercolor{bgcolor}{fg=white,bg=blue}

* Specification

** Roadmap
[[file:verification-roadmap.png]]
** Denotation

- Choose the simplest mathematical object that captures your intention.

- Often a function or relation, though not necessarily.

** What is a Bank?
*** A functional view
#+begin_src coq
Definition Transaction := PublicKey -> Sum Z.
Definition Bank        := PublicKey -> Sum N.
#+end_src

** Define an algebra over that denotation

#+begin_src coq
Definition query (who : PublicKey) (b : Bank) : Sum N :=
  b who.

Definition exchange (f t : PublicKey) (amount : N) :
  Transaction a :=
  fun owner =>
    mkSum (
      if eqPublicKey f t
      then 0
      else if eqPublicKey f owner
           then mkSum (0 - NtoZ amount)
           else if eqPublicKey t owner
                then amount
                else 0).
#+end_src

** Determine the laws of this algebra

#+begin_src coq
Definition query_self_exchange :=
  forall o n b, query o (exchange o o n) b = query o b.

Definition query_exchange_all :=
  forall o n b, query f (exchange f t (query f b)) b = 0.
#+end_src

** Relating Transactions to Bank

#+begin_src coq
Definition ValidTransaction
    `(t : Transaction) (b : Bank) : Prop :=
  forall h : PublicKey,
    let '(mkSum b') := b h in
    let '(mkSum t') := t h in
    0 <= NtoZ b' + t'.

Program Definition applyTransaction
    `(t : Transaction) (b : Bank) :
    ValidTransaction t b -> Bank :=
  fun H => mappend (fmap (fmap (ZtoN _)) t) b.
#+end_src

** Taking an ideal view

- The domain of the denotation has no "storage" or other limits; e.g., it is
  infinite and may even be continuous. There are no objects to be considered,
  only functional relationships. Even thinking about ideas such as State or
  sequencing at this stage is typically unwarranted.

- For example, since the "state" of the DFINITY network is a product of all
  past actions, it need not be considered in the denotation.

\vfill

#+begin_quote
"A mathematician, like a painter or a poet, is a maker of patterns. If his
patterns are more permanent than theirs, it is because they are made with
ideas."---G. H. Hardy
#+end_quote

** Multiparty exchange

Considering only the specification so far, the meaning of multi- party
transactions is natural:

\vfill

\[ applyTransaction\ (t1 \otimes t2 \otimes t3 \otimes t4)\ b\ \_  \]

\vfill

*** Note
:PROPERTIES:
:BEAMER_act: <2->
:END:

Individual transactions could be invalid while the aggregate remains valid.

** Where does this algebra come from?

- Finding the denotation and its unique vocabulary is creative work!

- Many denotations will support well known algebras: functors, monads,
  monoids, categories, etc.

- For example, the =Bank= denotation forms a monoid, so we might expect its
  denotation to be a monoid homomorphism:
\[ denote\ mempty = mempty \]
\[ denote\ (x \otimes y) = denote\ x \otimes denote\ y \]

** Generalizing further

- Once you have a denotation and an set of algebras, can they be generalized
  further? For example, is our bank really about coins, or just ownership in
  general?

\vspace{0.5ex}
#+begin_src coq
Definition Bank (a : Type) := PublicKey -> a.
#+end_src

- This is now a monoid only if =a= is a monoid, but it becomes: a representable
  functor, an applicative, and a monad. The denotation must be a homomorphism
  for each algebra of significance, guiding its development.

- We generalize to optimize for simplicity in the specification, and also to
  reveal and eliminate unnecessary limitations.

\vspace{0.5ex}
#+begin_src coq
Definition exchange `{Eq k} `{Group v}
           (f t : k) (amount : v) :
  Transaction k v := ...
#+end_src

** Over-specialization

- The opposite of not generalizing enough.

- For example, familiarity with monads may lend us to reach for =State= whenever
  it seems like a thing is being "updated"

- It would be odd if addition were specified as:
#+begin_src haskell
(+) :: Int -> State Int ()
#+end_src

- Monadic notation also makes it inconvenient not to single-thread things.
  Like imperative programming, it encourages unnecessary and unhelpful
  sequentiality in specification and implementation.

* Representation

** Choosing a representation

- With a specification in hand, we need a construction that represents a more
  computable form.

- Where denotations optimize for reasoning (simplicity and rigor),
  representations optimize for operational considerations such as efficient
  computability.

- It may still be a function, or relation, only refining the specification; or
  it may be something concrete, such as a data structure.

** Example: TransactionR

#+begin_src coq
Inductive TransactionR :=
  | Exchange (from to : PublicKey) (amount : nat).
#+end_src

** Some things to note

- While the specification allows for multi-party and atomic transactions, this
  representation does not.

- =TransactionR= is not a monoid; perhaps a list of =TransactionR= better
  represents what we meant?

- A list representation, however, would suggest sequential transactions, which
  the spec does not.

- It is easy to start with =TransactionR=---avoiding the exercise of working out
  =Transaction=---and miss such discrepancies.

** Example: BankR

#+begin_src coq
Definition BankR := list (PublicKey * nat).
#+end_src

* Implementation

** Denoting function

The denotating function relates the representation to specification.

** Denoting function

#+begin_src coq
Definition transactionD (t : TransactionR) :
  Transaction :=
  fun holder =>
    match t with
    | Exchange from to amount =><
      if eqPublicKey holder to
      then mkSum amount
      else if eqPublicKey holder from
           then mkSum (0 - amount)
           else mkSum 0%nat
    end.
#+end_src

** Denoting function

#+begin_src coq
Program Fixpoint bankD (t : BankR) : Bank :=
  fun holder =>
    match t with
    | nil => mkSum 0%nat
    | (h, amount) :: xs =>
      if eqPublicKey holder h
      then mkSum amount
      else bankD xs holder
    end.
#+end_src

** Proving homomorphisms

It must be a homomorphism, for example over the =exchange= function:

#+begin_src coq
Theorem TransactionR_exchange : forall f t amount,
  transactionD (Exchange f t amount)
    = exchange f t amount.
Proof.
  unfold transactionD, exchange; intros.
  extensionality i.
  now repeat destruct (eqPublicKey _ _) in |- *.
Qed.
#+end_src

** Working backward

- Although we can choose a representation and then prove the homomorphism
  equations, alternatively we could say that API design is about tasteful
  formulation of algebra problems, and implementation is the solving of those
  problems for some representation.

#+begin_src coq
exists x, transactionD x = exchange f t amount
#+end_src

- The advantage being that often, as there are many choices to be made with
  different trade-offs, doing the proof makes these choices apparent.

* Conclusion

** Conclusion

The basic idea reduces to a few steps:

  1. Think of mathematical objects that model your interest.
  2. Discover algebraic abstractions (monoid, group, functor, etc) your model
     already belongs to.
  3. Determine a vocabulary to express what you want to do; known algebras
     take advantage of centuries of prior thought, so look for forms that rely
     on these.
  4. Find a representation that encodes the desired capabilities.
  5. Define a function from representation to denotation.
  6. Prove that this function is homomorphic over all algebras.

[[https://github.com/conal/talk-2014-lambdajam-denotational-design]]

* Colophon

#+STARTUP: beamer
#+STARTUP: content fninline hidestars

#+OPTIONS: H:2

#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [utf8x,notes,c]

#+LATEX_HEADER_EXTRA: \usepackage{fontspec}
#+LATEX_HEADER_EXTRA: \usepackage{svg}
#+LATEX_HEADER_EXTRA: \usepackage{export}
#+LATEX_HEADER_EXTRA: \usepackage{underscore}
#+LATEX_HEADER_EXTRA: \usepackage{pdfcomment}
#+LATEX_HEADER_EXTRA: \usepackage{unicode-math}
#+LATEX_HEADER_EXTRA: \usepackage{minted}
#+LATEX_HEADER_EXTRA: \usepackage{tikz}
#+LATEX_HEADER_EXTRA: \usepackage{tikz-cd}
#+LATEX_HEADER_EXTRA: \setmainfont{Liberation Serif}
#+LATEX_HEADER_EXTRA: \setsansfont{Liberation Sans}
#+LATEX_HEADER_EXTRA: \setmonofont[SmallCapsFont={Liberation Mono}]{Liberation Mono}

#+BEAMER_THEME: [height=16mm] Rochester
#+BEAMER_COLOR: seahorse

#+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}
#+BEAMER_HEADER: \renewcommand{\note}[1]{\marginnote{\pdfcomment[icon=Note]{#1}}}
#+BEAMER_HEADER: \tikzcdset{/tikz/commutative diagrams/background color=lightorchid}
#+BEAMER_HEADER: \newcommand{\head}[1]{\begin{center}
#+BEAMER_HEADER: \vspace{13mm}\hspace{-1mm}\Huge{{#1}}
#+BEAMER_HEADER: \end{center}}
